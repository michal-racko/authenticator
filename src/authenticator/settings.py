"""
Django settings for authenticator project.

Generated by 'django-admin startproject' using Django 3.2.8.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

import environ

from pathlib import Path

env = environ.Env()
environ.Env.read_env()


def get_secret(variable_name: str,
               variable_file_name: str,
               default_value: str = None,
               required=False) -> str:
    """
    Reads the value of the desired variable from the environment (if present),
    file specified (if variable_file_name in env) or returns the default
    value if none of the previous is satisfied.
    """
    if variable_name in env:
        return env.str(variable_name)

    elif variable_file_name in env:
        variable_file = Path(env.str(variable_file_name))

        if not variable_file.is_file():
            raise EnvironmentError(
                f'No secrets file found at {variable_file}'
            )

        return variable_file.read_text().strip()

    else:
        if required and default_value is None:
            raise EnvironmentError(f'{variable_name} not set')
        return default_value


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

API_BASE_URL = get_secret(
    'AUTHENTICATOR_BASE_URL',
    'AUTHENTICATOR_BASE_URL_FILE',
    'api/v1'
)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = get_secret(
    'AUTHENTICATOR_SECRET_KEY',
    'AUTHENTICATOR_SECRET_KEY_FILE',
    required=True
)

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env.bool('AUTHENTICATOR_DEBUG', default=False)

ALLOWED_HOSTS = get_secret(
    'AUTHENTICATOR_ALLOWED_HOSTS',
    'AUTHENTICATOR_ALLOWED_HOSTS_FILE',
    'localhost'
).split(',')

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'oauth2_provider',
    'user_interface'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'authenticator.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'authenticator.wsgi.application'

# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'oauth2_provider.contrib.rest_framework.OAuth2Authentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    )
}

OAUTH2_PROVIDER = {
    'SCOPES': {
        'read': 'Read scope',
        'write': 'Write scope',
        'groups': 'Access to your groups'
    }
}

OAUTH2_URL = get_secret(
    'AUTHENTICATOR_OAUTH2_URL',
    'AUTHENTICATOR_OAUTH2_URL_FILE',
    default_value='http://localhost:8000/o'
)

ADMIN_USERNAME = get_secret(
    'AUTHENTICATOR_ADMIN_USERNAME',
    'AUTHENTICATOR_ADMIN_USERNAME_FILE',
    required=True
)

ADMIN_EMAIL = get_secret(
    'AUTHENTICATOR_ADMIN_EMAIL',
    'AUTHENTICATOR_ADMIN_EMAIL_FILE',
    required=True
)

ADMIN_PASSWORD = get_secret(
    'AUTHENTICATOR_ADMIN_PASSWORD',
    'AUTHENTICATOR_ADMIN_PASSWORD_FILE',
    required=True
)
